# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  BUILD_TESTS: ON

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    container:
      image: guillaumemichel1026/cvector:latest
      options: --privileged

    steps:
      - uses: actions/checkout@v4

      - name: Configure Conan profile
        run: conan profile detect

      - name: Install Conan dependencies
        if: env.BUILD_TESTS == 'ON'
        run: |
          conan install . --output-folder=${{github.workspace}}/build --build=missing -s build_type=${{env.BUILD_TYPE}}

      - name: Test
        run: ls -la

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B build -S ${{github.workspace}} \
                   -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
                   -DBUILD_TESTS=${{env.BUILD_TESTS}} \
                   -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/build/build/Release/generators/conan_toolchain.cmake

      - name: Build
        # Build your program with the given configuration
        run: cmake --build build --config ${{env.BUILD_TYPE}}

      - name: Test
        if: env.BUILD_TESTS == 'ON'
        run: ctest --test-dir build --output-on-failure
